package pokerpg;
import UserAgentContext;

/**
 * ...
 * @author Beetle
 */

class Util {
	
	/// Generates a random int in the range [min, max]
	static inline public function randInt(min:Int, max:Int):Int {
		return min + Math.floor((max - min + 1) * Math.random());
	}
	
	inline static public function clamp(n:Float, min:Float, max:Float):Float {
		return n < min ? min : (n > max ? max : n);
	}
	
	inline static public function or(v1:Dynamic, v2:Dynamic):Dynamic {
		return v1 ? v1 : v2;
	}
	
	public static function equalsStrings(a:String, b:String) {
		return a.toLowerCase() == b.toLowerCase();
	}
	
	static public function reduceTextSize(str:String, maxWidth:Int, ctx:CanvasRenderingContext2D):Array<String> {
		var arr = str.split(' ');
		var lines = [];
		
		while (arr.length > 0) {
			var fi = findMaximumTextSize(arr, maxWidth, ctx, 0, arr.length);
			lines.push(arr.slice(0, fi).join(' '));
			arr = arr.slice(fi);
		}
		
		return lines;
	}
	
	static private function findMaximumTextSize(arr:Array<String>, maxWidth:Int, ctx:CanvasRenderingContext2D, low:Int, high:Int):Int {
		if (high < low) return -1;
		if (high - low <= 1) return low + 1;
		
		var mid = Math.floor((low + high) / 2);
		var w = ctx.measureText(arr.slice(0, mid).join(' ')).width;
		if (w > maxWidth) {
			return findMaximumTextSize(arr, maxWidth, ctx, low, mid - 1);
		}else {
			if (ctx.measureText(arr.slice(0, mid + 1).join(' ')).width > maxWidth) {
				return mid;
			}else {
				return findMaximumTextSize(arr, maxWidth, ctx, mid + 1, high);
			}
		}
	}
	
	inline static public function getPokemonStatusBarName(pk:Pokemon):String {
		return Util.or(pk.nickname, Game.getPokemonData(pk.id).name).toUpperCase();
	}
	
	inline static public function getPokemonDisplayName(pk:Pokemon):String {
		var str = (pk != null ? Util.or(pk.nickname, (Game.getPokemonData(pk.id).name != null ? Game.getPokemonData(pk.id).name : 'Pokemon')).toUpperCase() : 'POKEMON');
		if (Game.curGame != null && Game.curGame.inBattle && Game.curGame.battle.enemyPokemon == pk) {
			if (Game.curGame.battle.type == Battle.BATTLE_WILD)
				str = 'Wild ' + str;
			if (Game.curGame.battle.type == Battle.BATTLE_VERSUS)
				str = 'FOE ' + str;
		}
		return str;
	}
	
	static public function drawRoundedRect(x:Int, y:Int, width:Int, height:Int, radius:Int, color:String, alpha:Float = 1.0):Void {
		var tmpCtx = Main.tmpCtx;
		var tmpCanvas = Main.tmpCanvas;
		var ctx = Main.ctx;
		tmpCtx.clearRect(0, 0, width, height);
		tmpCtx.save();
		tmpCtx.lineJoin = "round";
		tmpCtx.lineWidth = radius;
		tmpCtx.fillStyle = tmpCtx.strokeStyle = color;
		tmpCtx.strokeRect(radius / 2, radius / 2, width - radius, height - radius);
		tmpCtx.fillRect(radius / 2, radius / 2, width - radius, height - radius);
		tmpCtx.restore();
		
		ctx.save();
		ctx.globalAlpha = alpha;
		ctx.drawImage(tmpCanvas, 0, 0, width, height, x, y, width, height);
		ctx.restore();
	}
}